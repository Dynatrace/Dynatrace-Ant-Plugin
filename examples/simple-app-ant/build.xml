<?xml version="1.0" encoding="UTF-8"?>
<project name="Example app with Dynatrace integration">
	<description>Shows how to use the dynaTrace Automation Ant Tasks</description>
	
	<property name="dtBaseDir" value="../../build/dist/" />

	<!-- Import the dynaTrace Automation Tasks -->
	<import file="../../build/dist/dtTaskDefs.xml"/>
	
	<!-- Properties used for project purposes -->
	<!-- 
		*** Change properties below according to your Dynatrace configuration *** 
			
		agentPath - used by test phase to inject Java agent into JVM (not used directly by plugin)
		agentMapping - agent alias passed to Java agent (not used directly by plugin)
		systemProfile - defines system profile name used by startTest, enableProfile, activateConfiguration, ... (not used directly by plugin)
			
	-->
	<property name="agentPath" value="C:\Program Files\dynaTrace\dynaTrace 6.3\agent\lib64\dtagent.dll" />
	<property name="agentMapping" value="SimpleApp_SomeProfile" />
	<property name="dynaTrace.profile" value="SomeProfile" />
	<!-- *** *** -->
	
	<!-- targets with Dynatrace Automation tasks -->
	<!-- whenever given task doesn't have profile name, username, password, serverUrl... specified, it uses defaults from tasks definition xml -->
	<target name="ActivateConfiguration">
		<DtActivateConfiguration profileName="${dynaTrace.profile}" configuration="Default" />
	</target>
	
	<target name="ClearSession">
		<DtClearSession profileName="${dynaTrace.profile}" />
	</target>
	
	<target name="EnableProfile">
		<DtEnableProfile profileName="${dynaTrace.profile}" enable="true" />
	</target>
	
	<target name="DisableProfile">
		<DtEnableProfile profileName="${dynaTrace.profile}" enable="false" />
	</target>
	

	<!-- Retrieves the number of Connected Agents
		Then queries the agent information for the first connected agent and the first GoSpaceFrontend agent
		The requested information is stored in Ant Properties that can later be used by other tasks, e.g.: DtMemoryDump to identify the agent
	 -->
	<target name="GetAgentInfoByIndex">
		<DtGetAgentInfo agentCountProperty="AgentCount" />

		<DtGetAgentInfo agentNameProperty="AgentName" agentHostNameProperty="AgentHost" agentProcessIdProperty="AgentProcessId" infoForAgentByIndex="0" />
		<echo message="First Agent: ${AgentName} - ${AgentHost} - ${AgentProcessId}"></echo>
	</target>
	
	<target name="GetAgentInfoByName">
		<DtGetAgentInfo agentCountProperty="AgentCount" />

		<DtGetAgentInfo agentNameProperty="AgentName" agentHostNameProperty="AgentHost" agentProcessIdProperty="AgentProcessId" infoForAgentByName="someName" />
		<echo message="First Agent: ${AgentName} - ${AgentHost} - ${AgentProcessId}"></echo>
	</target>
	
	<!-- Takes a Memory and Thread Dump from a specific agent
		We call GetAgentInfo first that retrieves the Agent Information for which the dump gets created
	-->
	<target name="TakeMemoryAndThreadDumps" depends="GetAgentInfoByIndex" >
		<DtMemoryDump memoryDumpNameProperty="MemoryDumpName" agentName="${AgentName}" hostName="${AgentHost}" processId="${AgentProcessId}" profileName="${dynaTrace.profile}" />
		<echo message="Created Memory Dump: ${MemoryDumpName}" />

		<DtThreadDump threadDumpNameProperty="ThreadDumpName" agentName="${AgentName}" hostName="${AgentHost}" processId="${AgentProcessId}" profileName="${dynaTrace.profile}"/>
		<echo message="Created Thread Dump: ${ThreadDumpName}" />
	</target>
	
	<target name="SensorPlacement">
		<DtSensorPlacement agentId="123"/>
	</target>
	
	<target name="StorePurePaths">
		<DtStorePurePaths recordingOption="all" sessionLocked="false" appendTimestamp="false" />
	</target>
	
	<!-- Start Recording a new dynaTrace Session
		The actual session name will be stored in the Ant Property "SessionName" which can later be used as input for other tasks, e.g.: ReanalyzeSession
	-->
	<target name="StartRecording">
		<DtStartRecording profileName="GoSpace" sessionNameProperty="SessionName" sessionName="AntSession" sessionDescription="This Session is triggered by an Ant Task"  />
        <echo message="Start Recording SessionName: ${SessionName}" />
	</target>

	<!-- Stops current recording
		The actual session name will be stored in the Ant Property "SessionName" which can later be used as input for other tasks, e.g.: ReanalyzeSession
	-->
	<target name="StopRecording">
		<!-- The stopDelay (in ms) is in there so that you can manually create some purepaths in the meantime that end up in the session -->
		<DtStopRecording profileName="GoSpace" sessionNameProperty="SessionName" stopDelay="10000" />
		<echo message="Stopped Recording SessionName: ${SessionName}" />
    </target>

	<!-- Stops current recording and also reanalizes the session
		In this case the System Profile name comes from the global dtProfile Property
	-->
	<target name="StopRecordingWithReanalyze">
		<!-- The sleep is in there so that you can manually create some purepaths in the meantime that end up in the session -->
		<sleep seconds="10"/>

		<DtStopRecording doReanalyzeSession="true" reanalyzeStatusProperty="ReanalyzeStatus" />
		<echo message="Stopped Recording SessionName and reanalized: ${SessionName} - ${ReanalyzeStatus}" />
    </target>

	<!-- Reanalyzes a specific dynaTrace Session
		We use the value stored in the SessionName property which falls set by StopRecording
	-->
	<target name="ReanalyzeSession">
		<DtReanalyzeSession sessionName="${SessionName}" reanalyzeStatusProperty="ReanalyzeStatus" reanalyzeSessionTimeout="60000" reanalyzeSessionPollingInterval="5000" />

		<echo message="Reanalyze finished? ${ReanalyzeStatus}" />
	</target>

	<!-- Combines the calls to Start/Stop and Reanalyze -->
	<target name="StartStopRecordingAndReanalyze" depends="StartRecording,StopRecording,ReanalyzeSession" >
	</target>

	<!-- Combines the calls to Start and StopWithReanalyze -->
	<target name="StartStopInclReanalyze" depends="StartRecording,StopRecordingWithReanalyze" >
	</target>

	<!-- Sets Test Meta Data Information for Test Automation -->
	<!-- Use the debug flag for more log-output -->
	<target name="StartTestForCategorizedTest">
		<DtStartTest
			versionMajor="1"
			versionMinor="2"
			versionRevision="3"
			versionMilestone="m4"
			versionBuild="5"
			marker="marker"
			category="unit"
			platform="Linux"/>

		<echo>TestrunID: ${dtTestrunID}</echo>
		<!-- 
			 after registering a test run, you need to pass the dtTestrunID as an additional
			 parameter to the agent injected into the JVM that's executing the tests.
			 The following example assumes that dtagent property already holds basic agent
			 definition and parameters, dtTestrunID is added as an extra parameter
		-->
		
		<junit fork="no" printsummary="yes">
			<classpath location="lib/junit-4.12.jar" />
			<classpath location="lib/hamcrest-core-1.3.jar" />
			<batchtest fork="yes" todir="${report.dir}">
				<fileset dir="src/test">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
			<jvmarg value="-agentpath:${agentPath}=name=${dynaTrace.agentMapping},server=localhost,wait=5,optionTestRunIdJava=${dtTestrunID}" />
		</junit>
	</target>
</project>
